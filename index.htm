<html lang="en"></html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Camera</title>
    <link rel="icon" href="https://archive.org/download/FingerSnapLogo_201602/FingerSnapLogo.jpg">
    <link href="https://fonts.googleapis.com/css?family=Schoolbell&v1" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
	<link rel="icon" type="image/png" href="https://github.com/Armandodecampos/camera/blob/main/favicon.png?raw=true">
	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    
    <style>
    body{
    background:#ddd;
	padding:1%;
    }
    @media (orientation: landscape) {
    	body {
    		padding-right:5%;
		padding-left:5%;
        background:#ddd;
	     }
    }
        .camera-container {
            z-index: 10;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background: #111;
            overflow: hidden;
        }

        #video, #canvas {
            width: 98%;
            height: auto;
            object-fit: contain;
            border:2px solid #fff;
            max-width: 300px; /* Ajuste para a largura desejada da foto */
            max-height: 400px; /* Ajuste para a altura desejada da foto */
            background:#000;
        }

        #canvas {
            display: none;
            z-index: 2; /* Aumente o z-index para sobrepor o vídeo */
        }
        .btn-container {
            position: fixed;
            bottom: 50px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 10px;
            z-index: 2; /* Assegura que os botões fiquem sobre a imagem da câmera */
        }

.camera-toggle {
    position: fixed;
    top: 10px;
    right: 10px;
    background: white;
    border: none;
    font-size: 24px;
    cursor: pointer;
    padding: 10px;
    border-radius: 50%;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
    z-index: 2; /* Garante que o botão da câmera fique acima da imagem */
    border:2px solid #000;
}

.btncamera{
    background: #fff;
    color:#000;
    border: none;
    font-size: 24px;
    cursor: pointer;
    width:70px;
    height:70px;
    padding: 20px;
    border-radius: 50%;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
    z-index: 2; /* Garante que o botão da câmera fique acima da imagem */
    border:2px solid #000;
    font-size:20px;
}

.grayscale {
    filter: grayscale(100%);
}

button, .btncamera {
    outline: none; /* Remove a borda azul ao focar */
    -webkit-tap-highlight-color: transparent; /* Remove o efeito azul ao tocar */
    user-select: none; /* Impede a seleção de texto acidental */
}
#loader {
        position: fixed;
        width: 100%;
        height: 100%;
        background: #111;
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
}
#successIcon {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 100px; /* Ajuste o tamanho do ícone */
            color: #28a745; /* Verde */
            background: rgba(0, 0, 0, 0.7); /* Fundo escuro translúcido */
            padding: 20px;
            border-radius: 50%;
            z-index: 1000;
            text-align: center;
        }
        @keyframes shutterEffect {
    0% { clip-path: circle(100% at center); opacity: 1; }
    100% { clip-path: circle(0% at center); opacity: 0; }
}

#shutterOverlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: black;
    opacity: 0;
    clip-path: circle(100% at center);
    z-index: 2000;
    pointer-events: none;
}
#timerButton {
    position: fixed;
    top: 10px;
    margin:auto;
    left:0px;
    right: 0px; /* Altera para right: 10px; */
    background: #222;
    color: #fff;
    z-index: 3;
}
#timerText {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 4em;
    color: white;
    z-index: 4;
    display: none; /* Começa escondido */
    text-shadow: 2px 2px 4px black; /* Adiciona a sombra preta */
    pointer-events: none; /* Impede que o texto seja clicado */
}
    </style>
</head>
<body>
<div id="loader">
    <div class="spinner"></div>
</div>
    
    <div class="camera-container" id="cameraContainer">
    <button id="timerButton" class="btncamera" style="position: fixed; top: 10px; right: 10px; background: #222; color: #fff;">
    <i id="timerIcon" class="fas fa-clock"></i> <span id="timerText">10s</span>
</button>
        <video id="video" autoplay></video>
        <canvas id="canvas" width="300" height="400"></canvas>
        <div class="btn-container">
            <button class="btncamera" style="background:#222;color:#fff;" id="newPhotoButton" onclick="newPhoto()" style="display: none;">
    <i class="fas fa-trash-alt"></i>
</button>
            <button class="btncamera" style="background:#222;color:#fff;" id="cameraSwitchButton" onclick="switchCamera()">
    <i class="fas fa-sync-alt"></i>
</button>
<button class="btncamera" style="background:#fff;color:#000;width:80px;height:80px;font-size:25px;bottom:100px;" id="captureButton" onclick="takePhoto()">
    <i class="fas fa-camera"></i>
</button>
<button class="btncamera" style="background:#fff;color:#000;width:80px;height:80px;font-size:25px;bottom:100px;display: none;" id="downloadButton" onclick="downloadPhoto();">
                <i class="fas fa-download"></i>
            </button>
            <button class="btncamera" style="background:#222;color:#fff;" id="filterButton" onclick="toggleFilter()">
    <i class="fas fa-adjust"></i>
</button>

        </div>
    </div>
        <div id="successIcon">
        <i class="fas fa-check-circle"></i>
    </div>
    <div id="shutterOverlay"></div>
<script>
 window.addEventListener("load", function() {
        document.getElementById("loader").style.display = "none";
    });

let video = document.getElementById('video');
let canvas = document.getElementById('canvas');
let context = canvas.getContext('2d');
let cameraContainer = document.getElementById('cameraContainer');
let stream = null;
let facingMode = 'environment'; // Garante que a câmera traseira seja escolhida

let timerActive = false;
    let timerInterval;

    document.getElementById('timerButton').addEventListener('click', function() {
        let timerText = document.getElementById('timerText');
        let timerIcon = document.getElementById('timerIcon');

        if (timerActive) {
            // Cancelar o temporizador
            clearInterval(timerInterval);
            timerActive = false;
            timerIcon.className = 'fas fa-clock'; // Volta para o ícone de relógio
            timerText.textContent = "10s";
            timerText.style.display = 'none';
        } else {
            // Iniciar o temporizador
            let timer = 10;
            timerActive = true;
            timerIcon.className = 'fas fa-times'; // Muda para ícone de cancelar
            timerText.textContent = `${timer}`;
            timerText.style.display = 'block';

            timerInterval = setInterval(() => {
                timer--;
                timerText.textContent = `${timer}`;

                if (timer === 0) {
                    clearInterval(timerInterval);
                    timerActive = false;
                    takePhoto();
                    timerIcon.className = 'fas fa-clock';
                    timerText.textContent = "10s";
                    timerText.style.display = 'none';
                }
            }, 1000);
        }
    });
function startCamera() {
        const screenWidth = window.innerWidth;
        const screenHeight = window.innerHeight;

        let videoWidth = screenWidth;
        let videoHeight = (screenWidth * 100) / 85.11; // Ajuste para 85.11% de largura

        if (videoHeight > screenHeight) {
            videoHeight = screenHeight;
            videoWidth = (screenHeight * 85.11) / 100; // Ajuste para 85.11% de largura
        }

        if (screenWidth > 700) {
            videoWidth = Math.min(videoWidth, 700);
            videoHeight = (videoWidth * 100) / 85.11; // Ajuste para 85.11% de largura
        }

        video.width = videoWidth;
        video.height = videoHeight;
        canvas.width = videoWidth;
        canvas.height = videoHeight;

        const constraints = {
            video: {
                width: { ideal: videoWidth },
                height: { ideal: videoHeight },
                aspectRatio: videoWidth / videoHeight, // Mantém a proporção
                facingMode: facingMode
            }
        };

        navigator.mediaDevices.getUserMedia(constraints)
            .then(function (mediaStream) {
                if (stream) {
                    stream.getTracks().forEach(track => track.stop());
                }
                stream = mediaStream;
                video.srcObject = mediaStream;
            })
            .catch(function (error) {
                console.error('Erro ao acessar a câmera: ', error);
            });
    }

function stopCamera() {
    if (stream) {
        stream.getTracks().forEach(track => track.stop());
    }
}

function takePhoto() {
    let width = video.videoWidth;
    let height = video.videoHeight;

    canvas.width = width;
    canvas.height = height;
    context.drawImage(video, 0, 0, width, height);

    // Salva a imagem original antes de aplicar filtros
    originalImageData = context.getImageData(0, 0, canvas.width, canvas.height);

    // Se o modo preto e branco estiver ativado, aplica o efeito
    if (isGrayscale) {
        applyGrayscale();
    }

    canvas.style.display = "block";
    video.style.display = "none";
    document.getElementById("captureButton").style.display = "none";
    document.getElementById("cameraSwitchButton").style.display = "none";
    document.getElementById("downloadButton").style.display = "inline-block";
    document.getElementById("newPhotoButton").style.display = "inline-block";
    document.getElementById("timerButton").style.display = "none";
}



function generateRandomFilename() {
    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let filename = 'foto_';
    for (let i = 0; i < 16; i++) { // Gera uma sequência de 16 caracteres aleatórios
        filename += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return filename + '.png';
}

function downloadPhoto() {
    let link = document.createElement("a");
    link.href = canvas.toDataURL("image/png");
    link.download = generateRandomFilename(); // Nome do arquivo aleatório
    link.click();

    // Exibe o ícone de sucesso após o download
    document.getElementById("successIcon").style.display = "block";

    // Esconde o ícone de sucesso após 1 segundo e volta para a câmera
    setTimeout(() => {
        document.getElementById("successIcon").style.display = "none";
        newPhoto(); // Volta automaticamente para a câmera
    }, 1000);
}





function newPhoto() {
    canvas.style.display = 'none';
    video.style.display = 'block';
    document.getElementById('downloadButton').style.display = 'none';
    document.getElementById('newPhotoButton').style.display = 'none';
    document.getElementById('cameraSwitchButton').style.display = 'inline-block';
    document.getElementById('captureButton').style.display = 'inline-block';

    // Mostra o botão do temporizador novamente
    document.getElementById("timerButton").style.display = "inline-block";
}



function switchCamera() {
    facingMode = facingMode === 'user' ? 'environment' : 'user';
    stopCamera();
    startCamera();
}

let isGrayscale = false;
let originalImageData = null;

function toggleFilter() {
    isGrayscale = !isGrayscale;

    // Alterna o filtro no vídeo
    video.classList.toggle('grayscale', isGrayscale);

    // Se uma foto foi tirada, alterna o filtro no canvas
    if (canvas.style.display === 'block') {
        if (isGrayscale) {
            applyGrayscale();
        } else if (originalImageData) {
            context.putImageData(originalImageData, 0, 0); // Restaura a imagem original
        }
    }
}


function applyGrayscale() {
    let imageData = context.getImageData(0, 0, canvas.width, canvas.height);
    let data = imageData.data;

    for (let i = 0; i < data.length; i += 4) {
        let avg = (data[i] + data[i + 1] + data[i + 2]) / 3;
        data[i] = data[i + 1] = data[i + 2] = avg;
    }

    context.putImageData(imageData, 0, 0);
}




window.onload = function() {
document.getElementById('downloadButton').style.display = 'none';
document.getElementById('newPhotoButton').style.display = 'none';
    startCamera();  
};
</script>
</body>
</html>
