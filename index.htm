<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Camera</title>
    <link rel="icon" href="https://archive.org/download/FingerSnapLogo_201602/FingerSnapLogo.jpg">
    <link href="https://fonts.googleapis.com/css?family=Schoolbell&v1" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <link rel="icon" type="image/png" href="https://github.com/Armandodecampos/camera/blob/main/favicon.png?raw=true">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <style>
        body{
            background:#ddd;
            padding:1%;
        }
        @media (orientation: landscape) {
            body {
                padding-right:5%;
                padding-left:5%;
                background:#ddd;
            }
        }
        .camera-container {
            z-index: 10;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background: #111;
            overflow: hidden;
        }

        #video, #canvas {
            width: 90%;
            height: auto;
            object-fit: cover;
            aspect-ratio: 3 / 4; /* Força a proporção 3:4 */
            border:2px solid #fff;
            max-width: 300px; /* Ajuste para a largura desejada da foto */
            max-height: 400px; /* Ajuste para a altura desejada da foto */
        }

        #canvas {
            display: none;
            z-index: 2; /* Aumente o z-index para sobrepor o vídeo */
        }
        .btn-container {
            position: fixed;
            bottom: 50px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 10px;
            z-index: 2; /* Assegura que os botões fiquem sobre a imagem da câmera */
        }

        .camera-toggle {
            position: fixed;
            top: 10px;
            right: 10px;
            background: white;
            border: none;
            font-size: 24px;
            cursor: pointer;
            padding: 10px;
            border-radius: 50%;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
            z-index: 2; /* Garante que o botão da câmera fique acima da imagem */
            border:2px solid #000;
        }

        .btncamera{
            background: #fff;
            color:#000;
            border: none;
            font-size: 24px;
            cursor: pointer;
            width:70px;
            height:70px;
            padding: 20px;
            border-radius: 50%;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
            z-index: 2; /* Garante que o botão da câmera fique acima da imagem */
            border:2px solid #000;
            font-size:20px;
        }

        .grayscale {
            filter: grayscale(100%);
        }

        button, .btncamera {
            outline: none; /* Remove a borda azul ao focar */
            -webkit-tap-highlight-color: transparent; /* Remove o efeito azul ao tocar */
            user-select: none; /* Impede a seleção de texto acidental */
        }
        #loader {
            position: fixed;
            width: 100%;
            height: 100%;
            background: #111;
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        #successIcon {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 100px; /* Ajuste o tamanho do ícone */
            color: #28a745; /* Verde */
            background: rgba(0, 0, 0, 0.7); /* Fundo escuro translúcido */
            padding: 20px;
            border-radius: 50%;
            z-index: 1000;
            text-align: center;
        }
        #loadingIcon {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 100px; /* Ajuste o tamanho do ícone */
            color: #fff; /* Branco */
            background: rgba(0, 0, 0, 0.7); /* Fundo escuro translúcido */
            padding: 20px;
            border-radius: 50%;
            z-index: 1001;
            text-align: center;
        }
        .fa-check-circle {
  opacity: 0;
  animation: fadeIn 0.5s ease-in-out forwards;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
    </style>
</head>
<body>
<div id="loader">
    <div class="spinner"></div>
</div>
    
    <div class="camera-container" id="cameraContainer">
        <video id="video" autoplay></video>
        <canvas id="canvas" width="300" height="400"></canvas>
        <div class="btn-container">
            <button class="btncamera" style="background:#333;color:#fff" id="newPhotoButton" onclick="newPhoto()" style="display: none;">
                <i class="fas fa-trash-alt"></i>
            </button>
            <button class="btncamera" style="background:#333;color:#fff" id="cameraSwitchButton" onclick="switchCamera()">
                <i class="fas fa-sync-alt"></i>
            </button>
            <button class="btncamera" style="background:#fff;color:#333;width:80px;height:80px;font-size:25px;bottom:100px;" id="captureButton" onclick="takePhoto()">
                <i class="fas fa-camera"></i>
            </button>
            <button class="btncamera" style="background:#fff;color:#333;width:80px;height:80px;font-size:25px;bottom:100px;display: none;" id="downloadButton" onclick="downloadPhoto();">
                <i class="fas fa-download"></i>
            </button>
            <button class="btncamera" style="background:#333;color:#fff" id="filterButton" onclick="toggleFilter()">
                <i class="fas fa-adjust"></i>
            </button>
        </div>
    </div>
    <div id="successIcon">
        <i class="fas fa-check-circle"></i>
    </div>
    <div id="loadingIcon">
        <i class="fas fa-circle-notch fa-spin"></i>
    </div>
<script>
    window.addEventListener("load", function() {
        document.getElementById("loader").style.display = "none";
    });

    let video = document.getElementById('video');
    let canvas = document.getElementById('canvas');
    let context = canvas.getContext('2d');
    let stream = null;
    let mediaTrack = null;
    let facingMode = 'user';
    let isGrayscale = false;
    let originalImageData = null;

    function startCamera() {
        const constraints = {
            video: {
                width: { ideal: 1920 },
                height: { ideal: 1080 },
                facingMode: facingMode
            }
        };

        navigator.mediaDevices.getUserMedia(constraints)
            .then(function (mediaStream) {
                if (stream) {
                    stream.getTracks().forEach(track => track.stop());
                }
                stream = mediaStream;
                mediaTrack = mediaStream.getVideoTracks()[0];
                video.srcObject = mediaStream;
            })
            .catch(function (error) {
                console.error('Erro ao acessar a câmera: ', error);
            });
    }

    function takePhoto() {
        document.getElementById("loadingIcon").style.display = "block";
        if (!mediaTrack) {
            console.error("Câmera não iniciada.");
            document.getElementById("loadingIcon").style.display = "none";
            return;
        }

        let imageCapture = new ImageCapture(mediaTrack);

        imageCapture.takePhoto()
            .then(blob => {
                let imgURL = URL.createObjectURL(blob);
                let img = new Image();
                img.onload = function () {
                    let originalWidth = img.width;
                    let originalHeight = img.height;

                    let targetHeight = originalHeight;
                    let targetWidth = Math.round(originalHeight * 0.8511);
                    let startX = Math.round((originalWidth - targetWidth) / 2);

                    canvas.width = targetWidth;
                    canvas.height = targetHeight;
                    context.drawImage(img, startX, 0, targetWidth, targetHeight, 0, 0, targetWidth, targetHeight);

                    originalImageData = context.getImageData(0, 0, canvas.width, canvas.height);
                    if (isGrayscale) applyGrayscale();

                    URL.revokeObjectURL(imgURL);
                    document.getElementById("loadingIcon").style.display = "none";
                };
                img.src = imgURL;

                canvas.style.display = 'block';
                video.style.display = 'none';
                document.getElementById('downloadButton').style.display = 'inline-block';
                document.getElementById('newPhotoButton').style.display = 'inline-block';
                document.getElementById('captureButton').style.display = 'none';
                document.getElementById('cameraSwitchButton').style.display = 'none';
            })
            .catch(error => {
                console.error('Erro ao capturar foto: ', error);
                document.getElementById("loadingIcon").style.display = "none";
            });
    }

    function toggleFilter() {
        isGrayscale = !isGrayscale;

        if (isGrayscale) {
            video.style.filter = 'grayscale(100%)';
        } else {
            video.style.filter = 'none';
        }

        if (canvas.style.display === 'block') {
            if (isGrayscale) {
                applyGrayscale();
            } else {
                if (originalImageData) {
                    context.putImageData(originalImageData, 0, 0);
                }
            }
        }
    }

    function applyGrayscale() {
        let imageData = context.getImageData(0, 0, canvas.width, canvas.height);
        let data = imageData.data;

        for (let i = 0; i < data.length; i += 4) {
            let avg = (data[i] + data[i + 1] + data[i + 2]) / 3;
            data[i] = data[i + 1] = data[i + 2] = avg;
        }

        context.putImageData(imageData, 0, 0);
    }

    function downloadPhoto() {
        let link = document.createElement('a');
        link.href = canvas.toDataURL('image/png');
        link.download = 'foto_cortada.png';
        link.click();

        let successIcon = document.getElementById('successIcon');
        successIcon.style.display = 'block';

        setTimeout(() => {
            successIcon.style.display = 'none';
        }, 2000);
    }

    function newPhoto() {
        canvas.style.display = 'none';
        video.style.display = 'block';
        document.getElementById('downloadButton').style.display = 'none';
        document.getElementById('newPhotoButton').style.display = 'none';
        document.getElementById('captureButton').style.display = 'inline-block';
        document.getElementById('cameraSwitchButton').style.display = 'inline-block';
    }

    function switchCamera() {
        facingMode = (facingMode === 'user') ? 'environment' : 'user';
        if (stream) {
            stream.getTracks().forEach(track => track.stop());
        }
        startCamera();
    }

    window.onload = function() {
        document.getElementById('downloadButton').style.display = 'none';
        document.getElementById('newPhotoButton').style.display = 'none';
        startCamera();
    };
</script>
</body>
</html>