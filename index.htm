<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Camera</title>
    <link rel="icon" href="https://archive.org/download/FingerSnapLogo_201602/FingerSnapLogo.jpg">
    <link href="https://fonts.googleapis.com/css?family=Schoolbell&v1" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <link rel="icon" type="image/png" href="https://github.com/Armandodecampos/camera/blob/main/favicon.png?raw=true">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <style>
        body {
            background: #ddd;
            padding: 1%;
        }

        @media (orientation: landscape) {
            body {
                padding-right: 5%;
                padding-left: 5%;
                background: #ddd;
            }
        }

        .camera-container {
            z-index: 10;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background: #111;
            overflow: hidden;
        }

        #video, #canvas {
            width: 90%;
            height: auto;
            object-fit: cover;
            aspect-ratio: 3 / 4;
            border: 2px solid #fff;
            max-width: 300px;
            max-height: 400px;
        }

        #canvas {
            display: none;
            z-index: 2;
        }

        .btn-container {
            position: fixed;
            bottom: 50px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 10px;
            z-index: 2;
        }

        .camera-toggle {
            position: fixed;
            top: 10px;
            right: 10px;
            background: white;
            border: none;
            font-size: 24px;
            cursor: pointer;
            padding: 10px;
            border-radius: 50%;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
            z-index: 2;
            border: 2px solid #000;
        }

        .btncamera {
            background: #fff;
            color: #000;
            border: none;
            font-size: 24px;
            cursor: pointer;
            width: 70px;
            height: 70px;
            padding: 20px;
            border-radius: 50%;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
            z-index: 2;
            border: 2px solid #000;
            font-size: 20px;
        }

        .grayscale {
            filter: grayscale(100%);
        }

        button, .btncamera {
            outline: none;
            -webkit-tap-highlight-color: transparent;
            user-select: none;
        }

        #loader {
            position: fixed;
            width: 100%;
            height: 100%;
            background: #111;
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        #successIcon {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 100px;
            color: #28a745;
            background: rgba(0, 0, 0, 0.7);
            padding: 20px;
            border-radius: 50%;
            z-index: 1000;
            text-align: center;
        }

        @keyframes shutterEffect {
            0% {
                clip-path: circle(100% at center);
                opacity: 1;
            }
            100% {
                clip-path: circle(0% at center);
                opacity: 0;
            }
        }

        #shutterOverlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: black;
            opacity: 0;
            clip-path: circle(100% at center);
            z-index: 2000;
            pointer-events: none;
        }

        #timerButton {
            position: fixed;
            top: 10px;
            margin: auto;
            left: 0px;
            right: 0px;
            background: #222;
            color: #fff;
            z-index: 3;
        }

        #timerText {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 4em;
            color: white;
            z-index: 4;
            display: none;
            text-shadow: 2px 2px 4px black;
            pointer-events: none;
        }
    </style>
</head>
<body>
<div id="loader">
    <div class="spinner"></div>
</div>

<div class="camera-container" id="cameraContainer">
    <button id="timerButton" class="btncamera" style="position: fixed; top: 10px; right: 10px; background: #222; color: #fff;">
        <i id="timerIcon" class="fas fa-clock"></i> <span id="timerText">10s</span>
    </button>
    <video id="video" autoplay></video>
    <canvas id="canvas" width="300" height="400"></canvas>
    <div class="btn-container">
        <button class="btncamera" style="background:#222;color:#fff;" id="newPhotoButton" onclick="newPhoto()" style="display: none;">
            <i class="fas fa-trash-alt"></i>
        </button>
        <button class="btncamera" style="background:#222;color:#fff;" id="cameraSwitchButton" onclick="debouncedSwitchCamera()">
            <i class="fas fa-sync-alt"></i>
        </button>
        <button class="btncamera" style="background:#fff;color:#000;width:80px;height:80px;font-size:25px;bottom:100px;" id="captureButton" onclick="takePhoto()">
            <i class="fas fa-camera"></i>
        </button>
        <button class="btncamera" style="background:#fff;color:#000;width:80px;height:80px;font-size:25px;bottom:100px;display: none;" id="downloadButton" onclick="downloadPhoto();">
            <i class="fas fa-download"></i>
        </button>
        <button class="btncamera" style="background:#222;color:#fff;" id="filterButton" onclick="toggleFilter()">
            <i class="fas fa-adjust"></i>
        </button>
    </div>
</div>
<div id="successIcon">
    <i class="fas fa-check-circle"></i>
</div>
<div id="shutterOverlay"></div>
<script>
    window.addEventListener("load", function () {
        document.getElementById("loader").style.display = "none";
    });

    let video = document.getElementById('video');
    let canvas = document.getElementById('canvas');
    let context = canvas.getContext('2d');
    let stream = null;
    let facingMode = 'environment';
    let cameraActive = false; // Adicionado para verificação de estado

    document.getElementById('timerButton').addEventListener('click', function () {
        let timerText = document.getElementById('timerText');
        let timerIcon = document.getElementById('timerIcon');

        if (timerActive) {
            clearInterval(timerInterval);
            timerActive = false;
            timerIcon.className = 'fas fa-clock';
            timerText.textContent = "10s";
            timerText.style.display = 'none';
        } else {
            let timer = 10;
            timerActive = true;
            timerIcon.className = 'fas fa-times';
            timerText.textContent = `${timer}`;
            timerText.style.display = 'block';

            timerInterval = setInterval(() => {
                timer--;
                timerText.textContent = `${timer}`;

                if (timer === 0) {
                    clearInterval(timerInterval);
                    timerActive = false;
                    takePhoto();
                    timerIcon.className = 'fas fa-clock';
                    timerText.textContent = "10s";
                    timerText.style.display = 'none';
                }
            }, 1000);
        }
    });

    async function startCamera() {
        try {
            const constraints = {
                video: {
                    facingMode: facingMode,
                    width: { ideal: window.screen.width },
                    height: { ideal: window.screen.height },
                }
            };
            stream = await navigator.mediaDevices.getUserMedia(constraints);
            video.srcObject = stream;

            video.onloadedmetadata = () => {
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                cameraActive = true;
            };
        } catch (error) {
            console.error('Erro ao acessar a câmera:', error);
            cameraActive = false;
        }
    }

    function stopCamera() {
        if (stream) {
            stream.getTracks().forEach(track => track.stop());
            cameraActive = false;
        }
    }

    function switchCamera() {
        if (!cameraActive) return; // Verifica se a câmera está ativa

        facingMode = facingMode === 'user' ? 'environment' : 'user';
        stopCamera();
        startCamera();
    }

    // Debounce function
    function debounce(func, delay) {
        let timeoutId;
        return function (...args) {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => {
                func.apply(this, args);
            }, delay);
        };
    }

    const debouncedSwitchCamera = debounce(switchCamera, 500); // 500ms delay

    function takePhoto() {
        let width = video.videoWidth;
        let height = video.videoHeight;
        let targetAspectRatio = 120 / 141;
        let newWidth, newHeight;

        if (width / height > targetAspectRatio) {
            newHeight = height;
            newWidth = height * targetAspectRatio;
        } else {
            newWidth = width;
            newHeight = width / targetAspectRatio;
        }

        let xOffset = (width - newWidth) / 2;
        let yOffset = (height - newHeight) / 2;

        canvas.width = newWidth;
        canvas.height = newHeight;

        let shutter = document.getElementById("shutterOverlay");
        shutter.style.opacity = "1";
        shutter.style.animation = "shutterEffect 0.3s ease-in-out";

        setTimeout(() => {
            context.drawImage(video, xOffset, yOffset, newWidth, newHeight, 0, 0, newWidth, newHeight);
            originalImageData = context.getImageData(0, 0, canvas.width, canvas.height);

            if (isGrayscale) {
                applyGrayscale();
            }

            canvas.style.display = "block";
            video.style.display = "none";
            document.getElementById("captureButton").style.display = "none";
            document.getElementById("cameraSwitchButton").style.display = "none";
            document.getElementById("downloadButton").style.display = "inline-block";
            document.getElementById("newPhotoButton").style.display = "inline-block";
            document.getElementById("timerButton").style.display = "none";
            shutter.style.opacity = "0";
        }, 300);
    }

    function generateRandomFilename() {
        let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        let filename = 'foto_';
        for (let i = 0; i < 16; i++) {
            filename += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return filename + '.png';
    }

    function downloadPhoto() {
        let link = document.createElement("a");
        link.href = canvas.toDataURL("image/png");
        link.download = generateRandomFilename();
        link.click();

        document.getElementById("successIcon").style.display = "block";

        setTimeout(() => {
            document.getElementById("successIcon").style.display = "none";
            newPhoto();
        }, 1000);
    }

    function newPhoto() {
        canvas.style.display = 'none';
        video.style.display = 'block';
        document.getElementById('downloadButton').style.display = 'none';
        document.getElementById('newPhotoButton').style.display = 'none';
        document.getElementById('cameraSwitchButton').style.display = 'inline-block';
        document.getElementById('captureButton').style.display = 'inline-block';
        document.getElementById("timerButton").style.display = "inline-block";
    }

    let isGrayscale = false;
    let originalImageData = null;

    function toggleFilter() {
        isGrayscale = !isGrayscale;
        video.classList.toggle('grayscale', isGrayscale);

        if (canvas.style.display === 'block') {
            if (isGrayscale) {
                applyGrayscale();
            } else {
                if (originalImageData) {
                    context.putImageData(originalImageData, 0, 0);
                }
            }
        }
    }

    function applyGrayscale() {
        let imageData = context.getImageData(0, 0, canvas.width, canvas.height);
        let data = imageData.data;

        for (let i = 0; i < data.length; i += 4) {
            let avg = (data[i] + data[i + 1] + data[i + 2]) / 3;
            data[i] = data[i + 1] = data[i + 2] = avg;
        }

        context.putImageData(imageData, 0, 0);
    }

    window.onload = function () {
        document.getElementById('downloadButton').style.display = 'none';
        document.getElementById('newPhotoButton').style.display = 'none';
        startCamera();
    };
</script>
</body>
</html>